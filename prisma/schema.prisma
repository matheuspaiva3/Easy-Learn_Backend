// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model Seller {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  cpf       String     @unique
  phone     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Products  Products[]

  @@map("sellers")
}

model Buyer {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  cpf       String     @unique
  phone     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Products[]
  carts     Cart[]     // Adicionando relação com Cart
  orders    Order[]    // Adicionando relação com Order

  @@map("buyers")
}

model Cart {
  id        String     @id @default(uuid())
  buyerId   Int        // Usando Int para corresponder ao id do Buyer
  buyer     Buyer      @relation(fields: [buyerId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int      
  product   Products @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

model Order {
  id        String      @id @default(uuid())
  buyerId   Int         // Mudado para Int para corresponder ao Buyer
  buyer     Buyer       @relation(fields: [buyerId], references: [id])
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int      
  product   Products @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Products {
  id          Int         @id @default(autoincrement())
  title       String      @unique
  price       Int
  description String
  content     String
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  image       String
  sellerId    Int
  author      Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  File        File[]
  buyers      Buyer[]
  // Adicionando as novas relações
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model File {
  id        Int      @id @default(autoincrement())
  filename  String[]
  path      String[]
  productId Int
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  Products Products[]

  @@map("categories")
}
